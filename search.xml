<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[RxJava2 Tutorial Basic]]></title>
    <url>%2F%2FRxJava%2F2018-04-14-RxJava2-Tutorial-Basic%2F</url>
    <content type="text"><![CDATA[1. What are RxJava and reactive programming In reactive programming, the consumer reacts to the data as it comes in.This is the reason why asynchronous programming is also called reactive programming. Reactive programming allows to propagates event changes to registered observers. &gt;The Observer pattern has done right. ReactiveX is a combination of the best ideas from the Observer pattern, the Iterator pattern, and functional programming. RxJava is a library that lets you create applications in the reactive programming style. At its core, reactive programming provides a clean, efficient way of processing and reacting to streams of real-time data, including data with dynamic values. These data streams don’t necessarily have to take the form of traditional data types, as RxJava pretty much treats everything as a stream of data—everything from variables to properties, caches, and even user input events like clicks and swipes. The data emitted by each stream can either be a value, an error, or a “completed” signal, although you don’t necessarily have to implement the last two. To create this workflow of data streams and objects that react to them, RxJava extends the Observer software design pattern. Essentially, in RxJava you have Observable objects that emit a stream of data and then terminate, and Observer objects that subscribe to Observables. An Observer receives a notification each time their assigned Observable emits a value, an error, or a completed signal. So at a very high level, RxJava is all about: Creating an Observable. Giving that Observable some data to emit. Creating an Observer. Assigning the Observer to an Observable. Giving the Observer tasks to perform whenever it receives an emission from its assigned Observable. 2. Two key types There are two key types to understandwhen working with Rx: Observable representing sources of data. Observer(or subscriber) listening to the observables. An observable emits items, a subscriber consumes those items. 2.1 Observables Observables are the sources for the data.Usually, they start providing data once a subscriber starts listening. An observable may emit any number of items (including zero items). It can terminate either successfully or with an error. Sources may never terminate, for example, an observable fora button click can potentially produce an infinite stream of events. For now, we must understand the Subscribe method. Here is one key overload of the method: 1public final Subscription subscribe(Subscriber &lt;? super T&gt; subscriber) This is the method that you use to receive the values emitted by the observables. The subscriber is responsible for handling the values. The Subscriber class is an implementation of the Observer interface. An Observable pushes 3 kinds of event: values; Completion, which indicates that no more values will be pushed. Errors, if somthing caused the sequence to fail. These events also imply termination. 2.2 Observer(Subscriber)An observable can have any number of subscribers. If a new item is emitted from the observable, the onNext() method is called on each subscriber. If the observable finishes its data flow successful, the onComplete() method is optionally called on each subscriber. Similar, if the observable finishes its data flow with an error, the onError() method is optionally called on each subscriber. No calls happen after a call to onError or onCompleted.12345interface Observer&lt;T&gt; &#123; void onCompleted(); void onError(java.lang.Throwable e); void onNext(T t);&#125; Example:12345678String[] letters = &#123;"a", "b", "c", "d", "e", "f", "g"&#125;;Observable&lt;String&gt; observable = Observable.from(letters);observable.subscribe( i -&gt; result += i, //OnNext Throwable::printStackTrace, //OnError () -&gt; result += "_Completed" //OnCompleted);assertTrue(result.equals("abcdefg_Completed")); 2.3 Implementing ObservableIt’s not recommended to manually implement Observer or extend Observable. Since RxJava already provides all the building blocks you need. It is simpler and safer to use the many tools that Rx gives you for generating the functionality that you need. 2.3.1 Creating an Observable Observable.just()You can use the .just() operator to convert any object into an Observable. The result Observable will the emit the original object and complete.For example, here we’re creating an Observable that’ll emit a single string to all its Observers: 123456Observable&lt;String&gt; observable = Observable.just("Hello World!");Subscription subscription = observable.subscribe( v -&gt; System.out.println("Received: " + v), e -&gt; System.out.println("Error: " + e), () -&gt; System.out.println("Completed")); Observable.range()You can use the .range() operator to emit a range of sequential integers. The first integer you provider is the initial value, and the second is the number of integers you want to emit. For example 123456Observable&lt;Integer&gt; observable = Observable.range(0, 2);observable.subscribe( v -&gt; System.out.println("Received:" + v), e -&gt; System.out.println("Errir" + e), () -&gt; System.out.println("Completed")); Output 123Received:0Received:0Completed Observable.from()The .from() operator allows you to convert a collection of objects into an observable stream. You can convert an array into an Observable using Observable.fromArray, a Callable into an Observable using the Observable.fromCallable, an Iterable into an Observable using Observable.fromIterable and a ‘Future’ into an Observable using Observable.fromFuture() 1234567Integer[] array = &#123;1,3,5&#125;;Observable&lt;Integer&gt; observable = Observable.fromArray(array);observable.subscribe( v -&gt; System.out.println("Received:" + v), e -&gt; System.out.println("Errir" + e), () -&gt; System.out.println("Completed")); Output 1234Received:1Received:3Received:5Completed Future is a part of the Java framework and you may come acroos them while using frameworks that use concurrency. They are a less powerful concept for concurrency than Rx, since they only return one value. 12345678910111213FutureTask&lt;Integer&gt; f = new FutureTask&lt;Integer&gt;(() -&gt; &#123; Thread.sleep(2000); return 21;&#125;);new Thread(f).start();Observable&lt;Integer&gt; values = Observable.from(f);Subscription subscription = values.subscribe( v -&gt; System.out.println("Received: " + v), e -&gt; System.out.println("Error: " + e), () -&gt; System.out.println("Completed")); Output 12Received: 21Completed Observable.interval()This operator creates an Observable that emits an infinite sequence of ascending integers, with each emission separated by a time interval chosen by you. For example: 123456Observable&lt;Long&gt; observable = Observable.interval(1, TimeUnit.SECONDS);observable.subscribe( v -&gt; System.out.println("Received:" + v), e -&gt; System.out.println("Errir" + e), () -&gt; System.out.println("Completed")); Output 12345Received: 0Received: 1Received: 2Received: 3... This sequence will not terminate until we unsubscribe. Observable.empty()The empty() operator creats an Observable that emits no items but terminates normally, which can be useful when you need to quickly create an Observable for testing purposes. 1Observable&lt;String&gt; observable = Observable.empty(); More other ways to creat Observable seeing the creating observables operators 3.Operators3.1 Introducing Operators RxJava has an enormous collections of operators that are mainly intended to help you modify, filter, merge and transform the data that’s being emiited by your Observables. You could find the complete list of RxJava operators over at the official github or categorized operators in the official website. It’s allowed to chain multiple operators together. Applying an operators to an Observable typically returns another Observable, so you can just keep applying operators until you get the results you want. In the previous section we talked about the creating Observable operators, in this section we focus on other useful operators. 3.2 Filtering Observables filter takes a predicate function that makes a boolean decision for each value emitted. If the decision if false, the item is omitted from the filtered sequence. 1234567Observable&lt;Integer&gt; values = Observable.range(0, 10);values.filter(v -&gt; v % 2 == 0) .subscribe( v -&gt; System.out.println("Received:" + v), e -&gt; System.out.println("Errir" + e), () -&gt; System.out.println("Completed") ); Output 123456Received:0Received:2Received:4Received:6Received:8Completed distinct operator filters an Observable by only allowing items through that have not already been emitted. 12345678Integer[] array = &#123;1, 1, 2, 2, 3&#125;;Observable&lt;Integer&gt; values = Observable.fromArray(array);values.distinct() .subscribe( v -&gt; System.out.println("Received:" + v), e -&gt; System.out.println("Errir" + e), () -&gt; System.out.println("Completed") ); Output 1234Received:1Received:2Received:3Completed DistinceUntilChanged operator compares emitted items from the source Observable against their immediate predecessors in order to determine whether or not they are distince. 12345678Integer[] array = &#123;1, 1, 2, 3, 2&#125;;Observable&lt;Integer&gt; values = Observable.fromArray(array);values.distinctUntilChanged() .subscribe( v -&gt; System.out.println("Received:" + v), e -&gt; System.out.println("Errir" + e), () -&gt; System.out.println("Completed") ); Output 12345Received:1Received:2Received:3Received:2Completed ignoreElements will ignore every items, but allows its termination notification(either onError or onCompleted) to pass through unchanged. 12345Observable&lt;Integer&gt; values = Observable.range(0, 5);values.ignoreElements().subscribe( ()-&gt; System.out.println("Completed"), e-&gt; System.out.println("error")); Output 1Completed take takes the first n items emitted by the Observable. 123456Observable&lt;Integer&gt; values = Observable.range(0, 5);values.take(2).subscribe( v -&gt; System.out.println("Recevied: " + v), e-&gt; System.out.println("error"), ()-&gt; System.out.println("Completed")); Output 123Recevied: 0Recevied: 1Completed skip skips first n items emitted by the Observable. 1234567Observable&lt;Integer&gt; values = Observable.range(0, 5);values.skip(2) .subscribe( v -&gt; System.out.println("Recevied: " + v), e -&gt; System.out.println("error"), () -&gt; System.out.println("Completed") ); Output 1234Recevied: 2Recevied: 3Recevied: 4Completed takeWhile takes items emitted by Observable while a predicate is true, once the predicate function becomes false, it stops taking the items. 1234567Observable&lt;Integer&gt; values = Observable.range(0, 5);values.takeWhile(v -&gt; v &lt; 2) .subscribe( v -&gt; System.out.println("Recevied: " + v), e -&gt; System.out.println("error"), () -&gt; System.out.println("Completed") ); Output 123Recevied: 0Recevied: 1Completed skipWhile skip items while a predicate function is true, once the predicate function becomes false, it stops skipping the items. 1234567Observable&lt;Integer&gt; values = Observable.range(0, 5);values.skipWhile(v -&gt; v &lt; 2) .subscribe( v -&gt; System.out.println("Recevied: " + v), e -&gt; System.out.println("error"), () -&gt; System.out.println("Completed") ); Output 1234Recevied: 2Recevied: 3Recevied: 4Completed takeUntil takes the items emitted by the Observable from the beginning until the predicate function returns true 1234567Observable&lt;Integer&gt; observable = Observable.range(0, 5);observable.takeUntil( v -&gt; v==2) .subscribe( v -&gt; System.out.println("Received:" + v), e -&gt; System.out.println("Errir" + e), () -&gt; System.out.println("Completed")); Output 1234Received:0Received:1Received:2Completed skipUntil skips the items emitted by the source Observable until a second Observable emits an item, at which point skipUntil begins to take the items of the source Observable 3.3 Conditional and Boolean Operators Operators that evaluate one or more observables or items emitted by Observables All determine that whether all items emitted by an Observable meet some criteria and returns a boolean value based on tan evaluation of that item. All returns an Observable that emits only a single boolean value. The signature is: 1public final Observable&lt;java.lang.Boolean&gt; all(Func1&lt;? super T,java.lang.Boolean&gt; predicate) Example: 123456Observable&lt;Integer&gt; observable = Observable.range(0, 5);observable.all( v -&gt; v &lt; 10) .subscribe( result -&gt; System.out.println(result), e -&gt; System.out.println("Error: " + e) ); Output 1true contains determine whether an Observable emits a particular item or not. 123456Observable&lt;Integer&gt; observable = Observable.range(0, 2);observable.contains( 3) .subscribe( result -&gt; System.out.println(result), e -&gt; System.out.println("Error: " + e) ); Output 1false defaultIfEmpty emits items from the source Observable, or a default item if the source Observable emits nothing. 123456Observable&lt;Integer&gt; observable = Observable.empty();observable.defaultIfEmpty(1) .subscribe( v -&gt; System.out.println("Received:" + v), e -&gt; System.out.println("Errir" + e), () -&gt; System.out.println("Completed")); Output 12Received:1Completed sequenceEqual determine whether two Observable emit the same sequence of items. 12345678Observable&lt;Integer&gt; ints = Observable.range(1, 3);Observable&lt;String&gt; strings = Observable.just("1","2","3");Observable .sequenceEqual(ints,strings, (i,s) -&gt; s.equals(String.valueOf(i))) .subscribe( result -&gt; System.out.println(result), e -&gt; System.out.println("Error: " + e) ); Output 1true amb operator. Given two or more source Observable, emit all of the items from only the first of these Observables to emit an item or notification. It will pass throught the emissions and notifications of exactly one of theses Observables: the first one that sends a notification to Amb, either by emitting an item or sending an onError or onCompleted notification. Amb will ignore and discard the emissions and notifications of all of the other source observabeles. 12345678Observable interval = Observable.interval(200,TimeUnit.MILLISECONDS);Observable&lt;Integer&gt; ints = Observable.range(1, 3);Observable intervalDelay = Observable.interval(1000,1,TimeUnit.MILLISECONDS);Observable.ambArray(interval,intervalDelay,ints) .subscribe( v -&gt; System.out.println("Received:" + v), e -&gt; System.out.println("Errir" + e), () -&gt; System.out.println("Completed")); Output 1234Received:1Received:2Received:3Completed 3.4 Transforming observables Operators that transform items that are emitted by an Observable. It’s common to transform the items to the format that we want. map is the basic transformation operator. It takes a function which takes an item and return a new item of any type. The returned observable is composed of the values returned by the transformation function. 1234567Observable&lt;Integer&gt; observable = Observable.range(1, 3);observable.map(i -&gt; "String: "+i) .subscribe( result -&gt; System.out.println(result), e -&gt; System.out.println("Error: " + e), () -&gt; System.out.println("Completed") ); Output 1234String: 1String: 2String: 3Completed flatMap transformation operator takes items from the source observable and for each of them, returns a new observable that emits the new values. The returned observables will be flatten into a single Observable. flatMap merges the emissions of these resulting observables, emitting these merged result as its own sequence. Note that flatMap merges the emissions of these observables, so that they may interleave. 1234567Observable&lt;Integer&gt; observable = Observable.range(1, 3);observable.flatMap( i -&gt; Observable.range(0,i)) .subscribe( result -&gt; System.out.println(result), e -&gt; System.out.println("Error: " + e), () -&gt; System.out.println("Completed") ); Output 1234567001012Completed buffer periodically gather items emitted by an Observable into bundles and emit these bundles rather then emitting the items one at a time. buffer(int count) emits ono-overlapping buffers in the forms of Lists, each of which contains at most count items from the source observables(the final emitted List may have fewer than count items). 1234567Observable&lt;Integer&gt; observable = Observable.range(0, 5);observable.buffer(2) .subscribe( list -&gt; System.out.println(list), e -&gt; System.out.println("Error: " + e), () -&gt; System.out.println("Completed") ); Output 1234[0, 1][2, 3][4]Completed buffer(int count, int skip) creates a new buffer starting with the first emitted item from the source observable, and every skip items thereafter, and fills each buffer with count items. It emits these buffer as Lists. Depending on the values of count and skip these buffers may overlap(multiple buffers may contains the same item), or they may have gaps.Example buffer(3,2) means creates buffers that each buffer contains 3 elements, and skip 2 items to create a new buffer. 1234567Observable&lt;Integer&gt; observable = Observable.range(0, 10);observable.buffer(3,2) .subscribe( list -&gt; System.out.println(list), e -&gt; System.out.println("Error: " + e), () -&gt; System.out.println("Completed") ); Output 123456[0, 1, 2][2, 3, 4][4, 5, 6][6, 7, 8][8, 9]Completed groupBy divide an Observable into a set of Observables that each emit a different subset of items from the original observable.Example: group a range of numbers from 0 to 9 by even and odd. Print the last item of each group. 1234567Observable&lt;Integer&gt; observable = Observable.range(0, 10);observable.groupBy(v -&gt; v% 2 == 0) .subscribe( group -&gt; group.takeLast(1).subscribe(v-&gt; System.out.println(v)), e -&gt; System.out.println("Error: " + e), () -&gt; System.out.println("Completed") ); Output 12398Completed 3.5 Aggregate operators Operators that operate on the entire sequence of items emitted by an Observable. Operators like Count, Average, Max, Min and Sum return a sequence with a single value. 4. Reference : http://www.vogella.com/tutorials/RxJava/article.html http://www.baeldung.com/rx-java https://github.com/Froussios/Intro-To-RxJava https://code.tutsplus.com/tutorials/getting-started-with-rxjava-20-for-android--cms-28345]]></content>
      <categories>
        <category>RxJava</category>
      </categories>
      <tags>
        <tag>RxJava, RxJava2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Object to primitive conversion]]></title>
    <url>%2F%2FJavaScript%2F2017-11-03-Object-to-primitive-conversion%2F</url>
    <content type="text"><![CDATA[What happends when object are added obj1 + obj2, subtracted obj1 - obj2 or printed using alert(obj)?There are special methods in objects that do the conversion.For object, there is no to-boolean conversion, because all objects are true in a boolean context. So there are only string and numeric conversion.When we output an object like alert(obj), it converts the object to string. String conversion happens usually in this situation.The numeric conversion happens when we apply mathematical function. For instance, Date object can be suntracted, and the result date1 - date2 is the time difference between two dates. ToPrimitiveWhen an object is used in the context where a primitive is required, for instance, in an alert or mathematical operations, it’s converted to a primitive values using the ToPrimiteve algorithm.(specification)That algorithm allows us to customize the conversion using a special object method.Depending on the context, the conversion has a so-called “hint”.There are three variants. “string”When an operation expects a string, for object-to-string conversion, like alert:12// outputalert(obj); “numeric”When an operation expects a number, for object-to-number conversion, like maths:12345678// explicit conversionlet num = Number(obj);// mathslet delta = date1 - date2;// less/greater comparison between 2 objectslet greater = user1 &gt; user2; “default”Occurs in rare case when the operator is “not sure” what type to expect.For instance, binary plus + can work both with strings (concatenates them) and numbers (adds them), so both strings and numbers would do. Or when an object is compared using == with a string, number or a symbol.12345// binary pluslet total = car1 + car2;// obj == string/number/symbolif (user == 1) &#123; ... &#125;; The greater/less operator &lt;&gt; can work with both strings and numbers too. Still, it uses “number” hint, not “default”. That’s for historical reasons. In practice, all built-in objects except for one case(Date object) implement &quot;default&quot; conversion the same way as &quot;number&quot;. And probably we should do the same. To do the conversion, JavaScript tries to call the three object methods: Call Obj[Symbol.toPrimitive](hint) if the method exists. Otherwise if hint is &quot;string&quot; try obj.toString() and obj.valueOf(), whatever exists. Otherwise if hint is &quot;number&quot; or &quot;default&quot; try obj.valueOf() and obj.toString(), whatever exists. Symbol.toPrimitiveLet’s start from the first method. There’s a built-in symbol named Symbol.toPrimitive(specification) that should be used to name the conversion method, like this:1234obj[Symbol.toPrimitive] = function(hint) &#123; // return a primitive value // hint = one of "string", "number", "default"&#125; For instance, here user object implements it:1234567891011121314let user = &#123; name: "John", money: 1000, [Symbol.toPrimitive](hint) &#123; alert(`hint: $&#123;hint&#125;`); return hint == "string" ? `&#123;name: "$&#123;this.name&#125;"&#125;` : this.money; &#125;&#125;;// conversions demo:alert(user); // hint: string -&gt; &#123;name: "John"&#125;alert(+user); // hint: number -&gt; 1000alert(user + 500); // hint: default -&gt; 1500 As we can see from the code, the single method user[Symbol.toPrimitive] handles all conversion cases. Depending on the conversion user is converted to a string or a money amount. toString/valueOfMethods toString and valueOf provide an alternative “old-style” way to implement the conversion.JavaScript tries to find those two method in the order: toString -&gt; valueOf for &quot;string&quot; hint. ‘valueOf -&gt; toString’ otherwise. For instance, user does the same thing as above using a combination of toString and valueOf.12345678910111213141516171819let user = &#123; name: "John", money: 1000, // for hint="string" toString() &#123; return `&#123;name: "$&#123;this.name&#125;"&#125;`; &#125;, // for hint="number" or "default" valueOf() &#123; return this.money; &#125;&#125;;alert(user); // toString -&gt; &#123;name: "John"&#125;alert(+user); // valueOf -&gt; 1000alert(user + 500); // valueOf -&gt; 1500 toPrimitive and toString/valueOfThe important thing to know about all primitive-conversion methods is that they do not necessarily return the “hinted” primitive.There is no control whether toString() returns exactly a string, or whether Symbol.toPrimitive method returns a number for a hint “number”. The only mandatory thing: these methods must return a primitive. For instance: Mathematical operations (except binary plus) perform ToNumber conversion: 1234567let obj = &#123; toString() &#123; // toString handles all conversions in the absence of other methods return "2"; &#125;&#125;;alert(obj * 2); // 4, ToPrimitive gives "2", then it becomes 2 Binary plus checks the primitive – if it’s a string, then it does concatenation, otherwise it performs ToNumber and works with numbers. string example:1234567let obj = &#123; toString() &#123; return "2"; &#125;&#125;;alert(obj + 2); // 22 (ToPrimitive returned string =&gt; concatenation) Number example:1234567let obj = &#123; toString() &#123; return true; &#125;&#125;;alert(obj + 2); // 3 (ToPrimitive returned boolean, not string =&gt; ToNumber) SummaryThe object-to-primitive conversion is called automatically by many built-in functions and operators that expect a primitive as a value. There are 3 types (hints) of it: &quot;string&quot; (for alert and other string conversion) &quot;number&quot; (for maths) &quot;default&quot; (few operators) The specification describes explicitly which operator uses which hint. There are very few operators that “don’t know what to expect” and use the &quot;default&quot; hint. Usually for built-in objects &quot;default&quot; hint is handled the same way as &quot;number&quot;, so in practice the last two are often merged together. Reference: JavaScript.info]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cloning and Merging in JavaScript]]></title>
    <url>%2F%2FJavaScript%2F2017-11-02-Cloning-and-Merging-in-JavaScript%2F</url>
    <content type="text"><![CDATA[Cloning and merging, Object.assignCopying an object variable creates one more reference to the same object. What if we need to duplicate an object? We can use the method Object.assign for that:1Object.assign(dest[,src1,src2,...]) It copies the properties of all object src1, src2, ... into dest. In other words, properties of all arguments starting from the 2nd are copied into the 1st, then it returns dest1234567let user = &#123; name: "John"&#125;;let permission1 = &#123; canView: true&#125;;let permission2 = &#123; canEdit: true&#125;;Object.assign(user, permission1, permisson2);// now user = &#123;name:"John", canView: true, canEdit: true&#125; If the receiving object (user) already has the same named property, it will overwritten:123456let user = &#123; name: "John" &#125;;// overwrite name, add isAdminObject.assign(user, &#123; name: "Pete", isAdmin: true &#125;);// now user = &#123; name: "Pete", isAdmin: true &#125; Until now we assumed that all properties of user are primitive, But properties can be references to other object. What do do with them? Like this:12345678let user = &#123;name: "John",sizes: &#123;height: 182,width: 50&#125;&#125;;alert( user.sizes.height ); // 182 Now it’s not enough to copy clone.sizes = user.sizes, because the user.sizes is an object, it will be copied by reference. So clone and user will share the same sizes. Like this:123456789101112131415let user = &#123; name: "John", sizes: &#123; height: 182, width: 50 &#125;&#125;;let clone = Object.assign(&#123;&#125;, user);alert( user.sizes === clone.sizes ); // true, same object// user and clone share sizesuser.sizes.width++; // change a property from one placealert(clone.sizes.width); // 51, see the result from the other one To fix that, we use “deep cloning” that examine each value of user[key], if it’s an object, replicate its structure as well.There’s a standard algorithm for deep cloning that handles the case above and more complex cases, called the Structured cloning algorithm. We can use an implementation of a JavaScript library lodash, the method is called _.cloneDeep(obj)]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F%2Fother%2F2017-11-02-Garbage-Collection-in-JavaScript%2F</url>
    <content type="text"><![CDATA[— title: Garbage Collection in JavaScript date: 2017-11-02 12:44:59 lang: en tags: JavaScript category: JavaScript — Memory management in JavaScript is performed automatically and invisibily to us. We create primitives, objects, functions… All thattakes memory. What happens when something is no needed any more? How does the JavaScript engine discover it and clean it up? ## Reachability The main concept of memory management in JavaScript is reachability. “Reachable” values are those that are accessibleor useable somehow. They are guaranteed to be stored in memory. Roots There is a set of inherently reachable values that cannot be deleted for obvious reasons, those values are called roots - Local variables and parameters of the current function. - Variables and parameters for other functions on the currentchain of nested calls. - Global variables - (There are some other, internal ones as well) Any other values is considered reachable if it’s reachable from a root by a reference or by a chain of reference. For instance, if there’s an object(A) in a localvariable, and object(A) has a property referencing another object(B), then object(A) is considered reachable, and the object(B) is also reachable. &gt;There’s a background process in the JavaScript engine that is called garbage collector. It monitorsall objects and remove those that have becomen unreachable. ### A simple example Here’s the simplest example: javascript // user has a reference to the object let user = { name: &quot;John&quot; }; Here the arrow depicts anobject reference. The global variable user references the object {name: &quot;John&quot;}, the name property stores a primitive, so it’s painted inside the object. If the value of the user is overwritten, the reference is lost: javascript user = null; Now the object becomes unreachable. There’s no reference to it. Garbage collector will junk the data and free the memory. ### Two references Now assume we copied the reference from user to admin: javascript // user has a reference to the object let user = { name: &quot;John&quot; }; let admin = user; Now if we do the same: javascript user = null; the object is still reachable via admin global variable, so it’s still in memory.If we overwrite admin too, the it can be removed by garbage collector. ### Interlinked objects A more complex example: javascript function marry(man, woman) { woman.husband = man; man.wife = woman; return { father: man, mother: woman } } let family = marry({ name: &quot;John&quot; }, { name: &quot;Ann&quot; }); Function marry takes two objects and “marries” the two objects and returns a new object that contains them both. Global variable family is assigned to function marry which means also assigned to anobject which contains a father object and a mother object. The resulting memory structure: Now, all objects are reachable. Let’s remove two reference: javascript delete family.father; delete family.mother.husband; Now there is no reference to object father any more, so we could say that object father is now unreachable. It needs to delete the both two references to make father unaccessible. Whatif we set family variable to null: javascript family = null; then the memory structure becomes: It’s obvious that father and mother objects are still linked, but their common parent object is now unlinked fromthe root, there is no reference to it any more, so the whole object(returns of function marry) becomes unreachable and is removed from the memory. ### Internal algorithms The basic garbage collection algorithm is called “mark-and-sweep”. The following“garbage collection” stpes are regularly performed: - The garbage collector takes roots and “marks” (remember) them. - Then it visits and “marks” all references from roots. - Then it visits the marked objects and marks their references. All visitedobjects are remembered, so as not to visit the same object twice in the future. - …And so on, until there are unvisited references. - All objects without the “mark” are removed. For instance, let our object structure look like this: There are 3 global variable A,B,C, those are also roots. Now let’s see how “mark-and-sweep” garbage collector deals with it. The first step marks the roots: Then marks their references: And their references, while possible, until all references are marked: Now the objects that could not be visited in the process are considered unreachable and will be removed. That’s the conceptof how garbage collector works. JavaScript engines apply many optimizations to make it run faster and not affect the execution. Some of the optimizations: - Generational collection - objects are split into two sets: “new ones” and “old ones”. Manyobjects appear, do their job and die fast, they can be cleaned up aggressively. Those that survive for long enough, become “old” and are examined less often. - Incremental collection - if there are many objects, and we try to walk and mark the wholeobject set at once, it may take some time and introduce visible delays in the execution. So the engine tries to split the garbage collection into pieces. Then the pieces are executed one by one, separately. That requires some extra bookkeeping betweenthem to track changes, but we have many tiny delays instead of a big one. - Idle-time collection – the garbage collector tries to run only while the CPU is idle, to reduce the possible effect on the execution. ## Summary - Garbage collection is performedautomatically. We cannot force or prevent it. - Object are remained in memory while they are reachable. - Being referenced is not the same as being reachable(from a root). Modern engines implement advanced algorithm of garbage collection. A general book“The Garbage Collection Handbook: The Art of Automatic Memory Management” (R. Jones et al) covers some of them. More detailed information about V8 garbage collector is in the article A tour of V8: Garbage Collection.————————- Reference: JavaScript.info]]></content>
  </entry>
  <entry>
    <title><![CDATA[Expandable ListView]]></title>
    <url>%2F%2FXamarin-Forms%2F2017-10-23-Expandable-ListView%2F</url>
    <content type="text"><![CDATA[Xamarin.Forms Expandable ListViewThis demo explain how to create a expandable ListView with MVVM pattern using Xamarin.Forms. The ideal is from this blog. If you prefer first to know how to create a expandable ListView without MVVM pattern, please read the blog, and then go back to read this one.The following gif shows the result of this demo. ModelAn easy example, a continent include many countries, so here we create two models, Continent and Country. Continent has a Name and a list with several countries. Country has three property, Name,Code and Flag.12345678910111213public class Continent &#123; public string Name &#123; get; set; &#125; public List&lt;Country&gt; Countries &#123; get; set; &#125; = new List&lt;Country&gt;();&#125;public class Country&#123; public string Name &#123; get; set; &#125; public string Code &#123; get; set; &#125; public string Flag &#123; get; set; &#125;&#125; ViewThe view is the page, layout, UI controls of what a user sees on the screen. In this example is the ExamplePage. ViewModelFor exposing public properties of a model and some other properties that are useful for presenting , we need a ViewModel for each Model. Country model corresponds to a CountryViewModel and Continent corresponds to a ContinentViewModel.12345678910111213public class CountryViewModel&#123; private Country _country; public CountryViewModel(Country country) &#123; this._country = country; &#125; public string Name &#123; get &#123; return _country.Name; &#125; &#125; public string Code &#123; get &#123; return _country.Code; &#125; &#125; public string Flag &#123; get &#123; return _country.Flag; &#125; &#125;&#125; ContinentViewModel has a Expanded property which keeps track on whether the continent is expanded or collapsed. StateIcon will be an expaned icon when the list is expanded and collapsed when it’s not. ContinentViewModel implements INotifyPropertyChanged interfacce so that any changes on properties will be reflected in our list view. For example, when property Expanded changes, the StateIcon should be changed too, so we need to notify our ListView that the both properties are changed by calling OnPropertyChanged methods.12OnPropertyChanged(new PropertyChangedEventArgs("Expanded"));OnPropertyChanged(new PropertyChangedEventArgs("StateIcon")); Notice that ContinentViewModel must be subclass of ObservableCollection with generic type of CountryViewModel. Items of the ObservableCollection will be shown on the ListView. Here I use a light-weight MVVM helper classes named MVVMHelpers of James, it has a awesome ObservableRangeCollection which is a subclass of ObservableCollection and can add, remove or replace a range of object. More detail on this video. Constuctor of ContinentViewModel takes a Continent object which contains a country list and set Expanded by default to be true. In the constuctor method, a backup variable for storing CountryViewModel obejcts is populated with the countries of Continent. This backup variable is added to the ContinentViewModel if Expanded property is true.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class ContinentViewModel : ObservableRangeCollection&lt;CountryViewModel&gt;, INotifyPropertyChanged &#123; private Continent _continent; // It's a backup variable for storing CountryViewModel objects private ObservableRangeCollection&lt;CountryViewModel&gt; Countries = new ObservableRangeCollection&lt;CountryViewModel&gt;(); public ContinentViewModel(Continent continent, bool expanded = true) &#123; this._continent = continent; this._expanded = expanded; // Continent has many countries. Once we get it, init CountryViewModel and store it in a backup variable foreach (Country c in continent.Countries) &#123; Countries.Add(new CountryViewModel(c)); &#125; // ContinentViewModel add a range with CountryViewModel if(expanded) this.AddRange(Countries); &#125; public string Name &#123; get &#123; return _continent.Name; &#125; &#125; private bool _expanded; public bool Expanded &#123; get &#123; return _expanded; &#125; set &#123; if (_expanded != value) &#123; _expanded = value; OnPropertyChanged(new PropertyChangedEventArgs("Expanded")); OnPropertyChanged(new PropertyChangedEventArgs("StateIcon")); if (_expanded) &#123; this.AddRange(Countries); &#125; else &#123; this.Clear(); &#125; &#125; &#125; &#125; public string StateIcon &#123; get &#123; return Expanded ? "up" : "down"; &#125; &#125;&#125; Beside the above two ViewModels, another ViewModel is also required—ExamplePageViewModel corresponds to ExamplePage. Most of logic to ExamplePage should be handled in ExamplePageViewModel but not in ExamplePage.xaml.cs. ExamplePage sets the BindingContext to the ExamplePageViewModel.Once the ExamplePage is appearing, it calls OnAppearing methods, this is the apporiate place to load data from server. This job belongs to our ExamplePageViewModel, and it simply execute its command to load data. There is another method is used for handling property changed event. If the StateIcon has changed and new icon is inflated, it performs fade animation. Now nothing more code should be here, and logic handling should be in ExamplePageViewModel. 12345678910111213141516171819202122232425262728public partial class ExamplePage : ContentPage&#123; private ExamplePageViewModel ViewModel &#123; get &#123; return (ExamplePageViewModel)BindingContext; &#125; set &#123; BindingContext = value; &#125; &#125; public ExamplePage(ExamplePageViewModel viewModel) &#123; InitializeComponent(); this.ViewModel = viewModel; &#125; protected override void OnAppearing() &#123; base.OnAppearing(); ViewModel.LoadDataCommand.Execute(null); &#125; private void StateImage_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e) &#123; if (e.PropertyName.Equals("Source")) &#123; var image = sender as Image; image.Opacity = 0; image.FadeTo(1, 1000); &#125; &#125;&#125; ExamplePageViewModel has a List of type ObservableRangeCollection and two commands. List is the data source for ListView. LoadDataCommand is for loading data from server and HeaderClickCommand is for Continent click event handling.123456789101112131415161718192021222324public class ExamplePageViewModel&#123; public ObservableRangeCollection&lt;ContinentViewModel&gt; List &#123; get; private set; &#125; = new ObservableRangeCollection&lt;ContinentViewModel&gt;(); public ICommand LoadDataCommand &#123; get; private set; &#125; public ICommand HeaderClickCommand &#123; get; private set; &#125; public ExamplePageViewModel() &#123; this.LoadDataCommand = new Command(async () =&gt; await ExecuteLoadDataCommand()); this.HeaderClickCommand = new Command&lt;ContinentViewModel&gt;((item) =&gt; ExecuteHeaderClickCommand(item)); &#125; private async Task ExecuteLoadDataCommand() &#123; ... ... &#125; private void ExecuteHeaderClickCommand(ContinentViewModel item) &#123; item.Expanded = !item.Expanded; &#125;&#125; Data BindingExamplePage contains only a ListView displayed with customized group header and item. Group header template is a view of RelativeLayout, it shows a Lable and an Image. The TapGestureRecognizer of the RelativeLayout allows to click the header and expand or collapse the ListView. Once user click the group header, HeaderClickCommand will be executed and the Expanded property of ContinentViewModel will be updated. Since we have written the Set method of property Expanded, it changes the content of ContinentViewModel—add a range or clear itself. The bindable property ItemSource of ListView is bound to List which is a public property of ExamplePageViewModel.The GroupHeaderTemplate of ListView is bound to each item of List object, which is a ContinentViewModel object.The ItemTemplate of ListView is bound to each item of the ContinentViewModel object, which is a CountryViewModel object. Source Code is here package used in this example: MvvmHelpers from James CircleImage from James Reference : http://www.compliancestudio.io/blog/xamarin-forms-expandable-listview]]></content>
      <categories>
        <category>Xamarin.Forms</category>
      </categories>
      <tags>
        <tag>Xamarin.Forms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap Tutorial]]></title>
    <url>%2F%2FBootstrap%2F2017-10-18-bootstrap4-tutorial%2F</url>
    <content type="text"><![CDATA[.codeSnip{ color:blue } Starter Template12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M" crossorigin="anonymous"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="container"&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"&gt;&lt;/script&gt; &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"&gt;&lt;/script&gt; &lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1" crossorigin="anonymous"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; ContainerBootstrap also requires a containing element to wrap site contents.There are two container classes to choose from: The .container class provides a responsive fixed width container. The .container-fluid class provides a full width container, spanning the entire width of the viewport GridBootstrap’s grid system allows up to 12 columns across the page.Bootstrap’s grid system is responsive, and the columns will re-arrange automatically depending on the screen size.The Bootstrap grid system has four classes: xs (for phones) sm (for tablets) md (for desktops) lg (for larger desktops) Creating a row use the syntax1&lt;div class="row"&gt; then, add the size and the number of columns, syntax like: class=’col-*-*‘, example:1&lt;div class="col-sm-4"&gt;&lt;/div&gt; Example: Adding a 3 equal-width columns: ImagesThe following class can be used to style any images: Class Description .img-rounded Add rounded corners to an image .imag-circle An circle image .imag-thumbnail Shapes the image to a thunmbnail .img-responsive Image will scaled nicely to the parent Example:123&lt;div class="container"&gt; &lt;img class="img-responsive" src="img_chania.jpg" alt="Chania" width="460" height="345"&gt;&lt;/div&gt; Image GalleryUse grid system and the .thumbnail class to create an image gallery1234567891011121314151617181920212223242526272829303132&lt;div class="row"&gt; &lt;div class="col-md-4"&gt; &lt;div class="thumbnail"&gt; &lt;a href="/w3images/lights.jpg"&gt; &lt;img src="/w3images/lights.jpg" alt="Lights" style="width:100%"&gt; &lt;div class="caption"&gt; &lt;p&gt;Lorem ipsum...&lt;/p&gt; &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="col-md-4"&gt; &lt;div class="thumbnail"&gt; &lt;a href="/w3images/nature.jpg"&gt; &lt;img src="/w3images/nature.jpg" alt="Nature" style="width:100%"&gt; &lt;div class="caption"&gt; &lt;p&gt;Lorem ipsum...&lt;/p&gt; &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="col-md-4"&gt; &lt;div class="thumbnail"&gt; &lt;a href="/w3images/fjords.jpg"&gt; &lt;img src="/w3images/fjords.jpg" alt="Fjords" style="width:100%"&gt; &lt;div class="caption"&gt; &lt;p&gt;Lorem ipsum...&lt;/p&gt; &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; JumbotronA jumbotron is displayed as a big grey box with rounded corner. It enlarges the font size of the text inside it for calling attention to some special contents or informations. Use a div element with class .jumbotron to create a jumbotron. We could place the jumbotron inside or outside the &lt; div class=”container” &gt; , depends on if you want jumbotron to extend to the edge of the screen or not.1234567&lt;div class="jumbotron"&gt; &lt;h1&gt;Bootstrap Tutorial&lt;/h1&gt; &lt;/div&gt;&lt;div class="container"&gt; &lt;p&gt;This is some text.&lt;/p&gt; &lt;/div&gt; WellThe .well class adds a rounded border around an element with grey background color and some padding. Change the size of the well by adding the .well-sm or .well-lg class.1234&lt;div class="container"&gt; &lt;h2&gt;Well&lt;/h2&gt; &lt;div class="well well-lg"&gt;Basic Well&lt;/div&gt;&lt;/div&gt; AlertAlerts are created with .alert class, follwed by one of the four classes .alert-success .alert-info .alert-warning .alert-danger. Add .alert-link class to any links inside the alert box to create “matching colored links”.1234567891011121314&lt;div class="container"&gt;&gt; &lt;div class="alert alert-success"&gt; &lt;strong&gt;Success!&lt;/strong&gt; You should &lt;a href="#" class="alert-link"&gt;read this message&lt;/a&gt;. &lt;/div&gt; &lt;div class="alert alert-info"&gt; &lt;strong&gt;Info!&lt;/strong&gt; You should &lt;a href="#" class="alert-link"&gt;read this message&lt;/a&gt;. &lt;/div&gt; &lt;div class="alert alert-warning"&gt; &lt;strong&gt;Warning!&lt;/strong&gt; You should &lt;a href="#" class="alert-link"&gt;read this message&lt;/a&gt;. &lt;/div&gt; &lt;div class="alert alert-danger"&gt; &lt;strong&gt;Danger!&lt;/strong&gt; You should &lt;a href="#" class="alert-link"&gt;read this message&lt;/a&gt;. &lt;/div&gt;&lt;/div&gt; would be: To close the alert message, add a .alert-dismissable class to the alert container and class=’close’ and data-dismiss=’alert’ to a link or a button element(click on this, alert message will disappear) 123456&lt;div class="container"&gt; &lt;div class="alert alert-success alert-dismissable"&gt; &lt;a href="#" class="close" data-dismiss="alert" aria-label="close"&gt;×&lt;/a&gt; &lt;strong&gt;Success!&lt;/strong&gt; This alert box could indicate a successful or positive action. &lt;/div&gt;&lt;/div&gt; would be: ButtonThe button classes can be used on an &lt; a &gt; , &lt; button &gt; or &lt; input &gt; elements with different color and size.123456789&lt;div class="container"&gt; &lt;button type="button" class="btn btn-xs"&gt;Basic&lt;/button&gt; &lt;a href="#" class="btn btn-info btn-sm" role="button"&gt;Link Button&lt;/a&gt; &lt;button type="button" class="btn btn-primary btn-md"&gt;Button&lt;/button&gt; &lt;button type="button" class="btn btn-success btn-lg"&gt;Button&lt;/button&gt; &lt;input type="button" class="btn btn-warning btn-md" value="Input Button"&gt; &lt;input type="submit" class="btn btn-danger btn-sm" value="Submit Button"&gt; &lt;button type="button" class="btn btn-link btn-xs"&gt;Link&lt;/button&gt;&lt;/div&gt; would be:Block level button spans the entire width of the parent element.A button could be set to an active or disabled state.1234567891011&lt;style&gt;.btn-primary &#123; background: #ABC864;&#125;&lt;/style&gt;&lt;div class="container"&gt; &lt;button type="button" class="btn btn-primary"&gt;Primary Button&lt;/button&gt; &lt;button type="button" class="btn btn-primary active btn-block"&gt;Active Primary&lt;/button&gt; &lt;button type="button" class="btn btn-primary disabled btn-block"&gt;Disabled Primary&lt;/button&gt;&lt;/div&gt; would be: Button groups and dropdown menuUse the .btn-group class within a &lt; div &gt; element to create a button group, specify the size with .btn-group-lg|sm|xs class, and the vertical orientation(default is horizontal) with .btn-group-vertical class.1234567&lt;div class="container"&gt; &lt;div class="btn-group-vertical btn-group-lg"&gt; &lt;button type="button" class="btn btn-primary"&gt;Apple&lt;/button&gt; &lt;button type="button" class="btn btn-primary"&gt;Samsung&lt;/button&gt; &lt;button type="button" class="btn btn-primary"&gt;Sony&lt;/button&gt; &lt;/div&gt;&lt;/div&gt; would be: Dropdown menus button:1234567891011121314&lt;div class="container"&gt; &lt;div class="btn-group"&gt; &lt;button type="button" class="btn btn-primary"&gt;Apple&lt;/button&gt; &lt;button type="button" class="btn btn-primary"&gt;Samsung&lt;/button&gt; &lt;div class="btn-group"&gt; &lt;button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown"&gt; Sony &lt;span class="caret"&gt;&lt;/span&gt;&lt;/button&gt; &lt;ul class="dropdown-menu" role="menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Tablet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Smartphone&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; would be: Split button dropdown123456789101112&lt;div class="container"&gt; &lt;div class="btn-group"&gt; &lt;button type="button" class="btn btn-primary"&gt;Sony&lt;/button&gt; &lt;button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown"&gt; &lt;span class="caret"&gt;&lt;/span&gt; &lt;/button&gt; &lt;ul class="dropdown-menu" role="menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Tablet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Smartphone&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt; would be: BadgeUse the .badge class within &lt; span &gt; elements to create badges:12345&lt;div class="container"&gt; &lt;button type="button" class="btn btn-primary"&gt;Primary &lt;span class="badge"&gt;7&lt;/span&gt;&lt;/button&gt; &lt;button type="button" class="btn btn-success"&gt;Success &lt;span class="badge"&gt;3&lt;/span&gt;&lt;/button&gt; &lt;button type="button" class="btn btn-danger"&gt;Danger &lt;span class="badge"&gt;5&lt;/span&gt;&lt;/button&gt; &lt;/div&gt; LabelUse the .label class within &lt; span &gt; elements to create badges:12345678&lt;div class="container"&gt; &lt;h1&gt;&lt;span class="label label-default"&gt;Default Label&lt;/span&gt;&lt;/h1&gt; &lt;h2&gt;&lt;span class="label label-primary"&gt;Primary Label&lt;/span&gt;&lt;/h2&gt; &lt;h3&gt;&lt;span class="label label-success"&gt;Success Label&lt;/span&gt;&lt;/h3&gt; &lt;h4&gt;&lt;span class="label label-info"&gt;Info Label&lt;/span&gt;&lt;/h4&gt; &lt;h5&gt;&lt;span class="label label-warning"&gt;Warning Label&lt;/span&gt;&lt;/h5&gt; &lt;h6&gt;&lt;span class="label label-danger"&gt;Danger Label&lt;/span&gt;&lt;/h6&gt;&lt;/div&gt; would be: Progress barsTo create a default progress bar, add a .progress class to a &lt; div &gt; elements.Bootstrap provides Colored progress bar, Striped progress bar, Animated progress bar and Stacked progress bar1234567891011121314151617181920212223242526272829&lt;style&gt;.normal&#123; background: black;&#125;&lt;/style&gt;&lt;div class="container"&gt; &lt;div class="progress"&gt; &lt;div class="progress-bar progress-bar-success progress-bar-striped" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width:40%"&gt; 40% Complete (success) &lt;/div&gt; &lt;/div&gt; &lt;div class="progress"&gt; &lt;div class="progress-bar progress-bar-info progress-bar-striped active" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width:50%"&gt; 50% Complete (info) &lt;/div&gt; &lt;/div&gt; &lt;div class="progress"&gt; &lt;div class="progress-bar normal " role="progerssbar" style="width:20%"&gt; 20% Complete(black) &lt;/div&gt; &lt;div class="progress-bar progress-bar-warning" role="progressbar" style="width:60%"&gt; 60% Complete (warning) &lt;/div&gt; &lt;div class="progress-bar progress-bar-danger" role="progressbar" style="width:20%"&gt; 20% Complete (danger) &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; would be: PaginationIf you have a website with lots of pages, you wish to add some sort of pagination to each page. To create a basic pagination, add the .pagination class to an &lt; ul &gt; element. Class .active indicate that the page that users are now on. Class .disabled means a link is for some reason disabled.You can also set the size of the pagination with class .pagination-lg|sm.123456789&lt;div class="container"&gt; &lt;ul class="pagination pagination-lg"&gt; &lt;li class="active"&gt;&lt;a href="#" &gt;1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;3&lt;/a&gt;&lt;/li&gt; &lt;li class="disabled"&gt;&lt;a href="#"&gt;4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;5&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; would be: Another form for pagination if Breadcrumbs. The Breadcrumbs indicates the current page’s location within a navigation hierachy:12345678&lt;div class="container"&gt; &lt;ul class="breadcrumb"&gt; &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Private&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Pictures&lt;/a&gt;&lt;/li&gt; &lt;li class="active"&gt;Vacation&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; would be: List groupsTo create a basic list group, use an &lt; ul &gt; element with class .list-group and &lt; li &gt; element with class .list-group-item.1234567&lt;div class="container"&gt; &lt;ul class="list-group"&gt; &lt;li class="list-group-item"&gt;New &lt;span class="badge"&gt;12&lt;/span&gt;&lt;/li&gt; &lt;li class="list-group-item"&gt;Deleted &lt;span class="badge"&gt;5&lt;/span&gt;&lt;/li&gt; &lt;li class="list-group-item"&gt;Warnings &lt;span class="badge"&gt;3&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; would be: To create a list group with linked items, use &lt; div &gt; instead of &lt; ul &gt; and &lt; a &gt; instead of &lt; li &gt; :1234567&lt;div class="container"&gt; &lt;div class="list-group"&gt; &lt;a href="#" class="list-group-item disabled"&gt;First item&lt;/a&gt; &lt;a href="#" class="list-group-item"&gt;Second item&lt;/a&gt; &lt;a href="#" class="list-group-item active"&gt;Third item&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; would be: Bootstrap provides also colored and the class .list-group-item-heading and .list-group-item-text which can be used as follows:12345678910111213141516&lt;div class="container"&gt; &lt;div class="list-group"&gt; &lt;a href="#" class="list-group-item list-group-item-info"&gt; &lt;h4 class="list-group-item-heading"&gt;First List Group Item Heading&lt;/h4&gt; &lt;p class="list-group-item-text"&gt;List Group Item Text&lt;/p&gt; &lt;/a&gt; &lt;a href="#" class="list-group-item list-group-item-success"&gt; &lt;h4 class="list-group-item-heading"&gt;Second List Group Item Heading&lt;/h4&gt; &lt;p class="list-group-item-text"&gt;List Group Item Text&lt;/p&gt; &lt;/a&gt; &lt;a href="#" class="list-group-item list-group-item-warning"&gt; &lt;h4 class="list-group-item-heading"&gt;Third List Group Item Heading&lt;/h4&gt; &lt;p class="list-group-item-text"&gt;List Group Item Text&lt;/p&gt; &lt;/a&gt; &lt;/div&gt;&lt;/div&gt; would be: PanelsA panel is a bordered box with some padding around its content. Panel are created with the .panel class and content inside the panel has a .panel-body class.The .panel-default class is used to style the color of the panel.Panel has also heading and footer with class The .panel-heading and The .panel-footer.To group many panels together, wrap a &lt; div &gt; class with class .panel-group around them. The .panel-group class clears the bottom-margin of each panel:123456789101112131415161718&lt;div class="container"&gt; &lt;div class="panel-group"&gt; &lt;div class="panel panel-default"&gt; &lt;div class="panel-heading"&gt;Panel with panel-success class&lt;/div&gt; &lt;div class="panel-body"&gt;Panel Content&lt;/div&gt; &lt;/div&gt; &lt;div class="panel panel-info"&gt; &lt;div class="panel-heading"&gt;Panel with panel-info class&lt;/div&gt; &lt;div class="panel-body"&gt;Panel Content&lt;/div&gt; &lt;/div&gt; &lt;div class="panel panel-danger"&gt; &lt;div class="panel-heading"&gt;Panel with panel-danger class&lt;/div&gt; &lt;div class="panel-body"&gt;Panel Content&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; would be: DropdownDropdown menu is defined by the &lt; div &gt; element with class .dropdown.To open the dropdown menu, use a button or a link with a class of .dropdown-toggle and the data-toggle=”dropdown” attribute. .caret class creates a caret arrow icon(), which indicates that the button is a dropdown. .dropdown-menu class within a &lt; ul &gt; element to actually build the dropdown menu. .divider class is used to draw a horizontal border to seperate links. .dropdown-header class is used to add a header inside the dropdown menu. .disabled class and .active class to disable and active a dropdown item. .dropup instead of .dropdown to expand upwards instead of downwards.12345678910111213141516&lt;div class="container"&gt; &lt;div class="dropdown"&gt; &lt;button class="btn btn-success dropdown-toggle" type="button" data-toggle="dropdown"&gt;Tutorials &lt;span class="caret"&gt;&lt;/span&gt;&lt;/button&gt; &lt;ul class="dropdown-menu"&gt; &lt;li class="dropdown-header"&gt;Dropdown header 1&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;HTML&lt;/a&gt;&lt;/li&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;CSS&lt;/a&gt;&lt;/li&gt; &lt;li class="disabled"&gt;&lt;a href="#"&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &lt;li class="divider"&gt;&lt;/li&gt; &lt;li class="dropdown-header"&gt;Dropdown header 2&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;About Us&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Contanct Us&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt; would be: Collapse.collapse class indicates a collapsible element. This is the content that will be shown or hidden.To control the collapsible element, add the data-toggle=’collapse’ class to an &lt;a&gt; or &lt;button&gt; element.Then, add the .data-target=”#id” class to connect the button with the collapsible content.The collapsible content is by default hidden. However you can add the .in to show content by default:12345678&lt;div class="container"&gt; &lt;button type="button" class="btn btn-info" data-toggle="collapse" data-target="#demo"&gt;Simple collapsible&lt;/button&gt; &lt;div id="demo" class="collapse in"&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. &lt;/div&gt;&lt;/div&gt; would be: Collapsible Panel123456789101112131415&lt;div class="container"&gt; &lt;div class="panel-group"&gt; &lt;div class="panel panel-default"&gt; &lt;div class="panel-heading"&gt; &lt;h4 class="panel-title"&gt; &lt;a data-toggle="collapse" href="#collapse1"&gt;Collapsible panel&lt;/a&gt; &lt;/h4&gt; &lt;/div&gt; &lt;div id="collapse1" class="panel-collapse collapse"&gt; &lt;div class="panel-body"&gt;Panel Body&lt;/div&gt; &lt;div class="panel-footer"&gt;Panel Footer&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; would be: Collapsible List Group12345678910111213141516171819&lt;div class="container"&gt; &lt;div class="panel-group"&gt; &lt;div class="panel panel-default"&gt; &lt;div class="panel-heading"&gt; &lt;h4 class="panel-title"&gt; &lt;a data-toggle="collapse" href="#collapse1"&gt;Collapsible list group&lt;/a&gt; &lt;/h4&gt; &lt;/div&gt; &lt;div id="collapse1" class="panel-collapse collapse"&gt; &lt;ul class="list-group"&gt; &lt;li class="list-group-item"&gt;One&lt;/li&gt; &lt;li class="list-group-item"&gt;Two&lt;/li&gt; &lt;li class="list-group-item"&gt;Three&lt;/li&gt; &lt;/ul&gt; &lt;div class="panel-footer"&gt;Footer&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; would be: AccordionUse the .data-parent attribute to make sure that all collapsible elements under the specified parent will be closed when one of the collapsible item is shown.12345678910111213141516171819202122232425262728293031323334&lt;div class="container"&gt; &lt;div class="panel-group" id="accordion"&gt; &lt;div class="panel panel-default"&gt; &lt;div class="panel-heading"&gt; &lt;h4 class="panel-title"&gt; &lt;a data-toggle="collapse" data-parent="#accordion" href="#collapse1"&gt;Collapsible Group 1&lt;/a&gt; &lt;/h4&gt; &lt;/div&gt; &lt;div id="collapse1" class="panel-collapse collapse in"&gt; &lt;div class="panel-body"&gt;Collapsible Group 1.&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="panel panel-default"&gt; &lt;div class="panel-heading"&gt; &lt;h4 class="panel-title"&gt; &lt;a data-toggle="collapse" data-parent="#accordion" href="#collapse2"&gt;Collapsible Group 2&lt;/a&gt; &lt;/h4&gt; &lt;/div&gt; &lt;div id="collapse2" class="panel-collapse collapse"&gt; &lt;div class="panel-body"&gt;Collapsible Group 2.&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="panel panel-default"&gt; &lt;div class="panel-heading"&gt; &lt;h4 class="panel-title"&gt; &lt;a data-toggle="collapse" data-parent="#accordion" href="#collapse3"&gt;Collapsible Group 3&lt;/a&gt; &lt;/h4&gt; &lt;/div&gt; &lt;div id="collapse3" class="panel-collapse collapse"&gt; &lt;div class="panel-body"&gt;Collapsible Group 3.&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; would be: Tabs with Dropdown MenuTabs are created with &lt;ul class=’nav nav-tabs’&gt;.Add .active inside the &lt;li&gt; element to mark the current active tab..dropdown class indicates a dropdown tab. Dropdown menu is specified with &lt;ul&gt; and &lt;li&gt; elements.123456789101112131415&lt;div class="container"&gt;&lt;ul class="nav nav-tabs"&gt; &lt;li &gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li class="dropdown active" &gt; &lt;a class="dropdown-toggle" data-toggle="dropdown" href="#"&gt;Menu 1 &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Submenu 1-1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Submenu 1-2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Submenu 1-3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li &gt;&lt;a href="#"&gt;Menu 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Menu 3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; PillsPills are created with &lt;ul class=’nav nav-pills’&gt;. Also mark the current page with &lt;li class=’active’&gt;.Pills can also be displayed vertically, add the .nav-stacked class;123456789101112131415&lt;div class="container"&gt; &lt;ul class="nav nav-pills nav-stacked"&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li class="dropdown"&gt; &lt;a class="dropdown-toggle" data-toggle="dropdown" href="#"&gt;Menu 1 &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Submenu 1-1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Submenu 1-2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Submenu 1-3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Menu 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Menu 3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; Tabs and PillsCentered Tabs and PillsAdd class .nav-justified to center/justify the tabs and pills. If screens are smaller then 768px, the list items are stacked(remain centered) 123456789101112131415161718&lt;div class="container"&gt; &lt;h3&gt;Centered Tabs&lt;/h3&gt; &lt;p&gt;To center/justify the tabs and pills, use the .nav-justified class. Note that on screens that are smaller than 768px, the list items are stacked (content will remain centered).&lt;/p&gt; &lt;ul class="nav nav-tabs nav-justified"&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Menu 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Menu 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Menu 3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;br&gt; &lt;h3&gt;Centered Pills&lt;/h3&gt; &lt;ul class="nav nav-pills nav-justified"&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Menu 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Menu 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Menu 3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; would be: Toggleable Tabs/PillsTo make tabs/pills toggleable, add the data-toggle=’tab|pill’ attribute to each link.Then, add tab-pane class with a unique ID for every tab and wrap them inside a &lt;div&gt; element with class .tab-content123456789101112131415161718192021222324252627&lt;div class="container"&gt; &lt;ul class="nav nav-tabs"&gt; &lt;!--or nav-pills with data-toggle="pill" --&gt; &lt;li class="active"&gt;&lt;a data-toggle="tab" href="#home"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a data-toggle="tab" href="#menu1"&gt;Menu 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a data-toggle="tab" href="#menu2"&gt;Menu 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a data-toggle="tab" href="#menu3"&gt;Menu 3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class="tab-content"&gt; &lt;div id="home" class="tab-pane fade in active"&gt; &lt;h3&gt;HOME&lt;/h3&gt; &lt;p&gt;Home page&lt;/p&gt; &lt;/div&gt; &lt;div id="menu1" class="tab-pane fade"&gt; &lt;h3&gt;Menu 1&lt;/h3&gt; &lt;p&gt;Menu 1 page&lt;/p&gt; &lt;/div&gt; &lt;div id="menu2" class="tab-pane fade"&gt; &lt;h3&gt;Menu 2&lt;/h3&gt; &lt;p&gt;Menu 2 page&lt;/p&gt; &lt;/div&gt; &lt;div id="menu3" class="tab-pane fade"&gt; &lt;h3&gt;Menu 3&lt;/h3&gt; &lt;p&gt;Menu 3 page&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; would be: Navigation barsA standard navigation bar is created with &lt;nav class=’navbar navbar-default’&gt;. .navbar-inverse is an alternative of the navigation bar style. Navigation bar can also hold dropdown menus. .navbar-right class is used to right-align navigation bar buttons. .navbar-btn class is use to add a button inside the navigation bar. .navbar-form allow us to create a form inside the navigation bar. .navbar-fixed-top|bottom is used to fix the navigation bar at the top or bottom of the page. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;body style="height:500px"&gt;&lt;nav class="navbar navbar-inverse navbar-fixed-top"&gt; &lt;div class="container-fluid"&gt; &lt;div class="navbar-header"&gt; &lt;a class="navbar-brand" href="#"&gt;WebSiteName&lt;/a&gt; &lt;/div&gt; &lt;ul class="nav navbar-nav"&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li class="dropdown"&gt;&lt;a class="dropdown-toggle" data-toggle="dropdown" href="#"&gt;Page 1 &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Page 1-1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Page 1-2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Page 1-3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Page 2&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class="nav navbar-nav navbar-right"&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;span class="glyphicon glyphicon-user"&gt;&lt;/span&gt; Sign Up&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;span class="glyphicon glyphicon-log-in"&gt;&lt;/span&gt; Login&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;button class='btn btn-default navbar-btn navbar-right'&gt;Button&lt;/button&gt; &lt;p class="navbar-text"&gt;Some Text&lt;/p&gt; &lt;form class="navbar-form navbar-left"&gt; &lt;div class="input-group"&gt; &lt;input type="text" class="form-control" placeholder="Search"&gt; &lt;div class="input-group-btn"&gt; &lt;button class="btn btn-default" type="submit"&gt; &lt;i class="glyphicon glyphicon-search"&gt;&lt;/i&gt; &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt;&lt;/nav&gt;&lt;div class="container" style="margin-top:50px"&gt; &lt;h3&gt;Fixed Navbar&lt;/h3&gt; &lt;div class="row"&gt; &lt;div class="col-md-4"&gt; &lt;p&gt;A fixed navigation bar stays visible in a fixed position (top or bottom) independent of the page scroll.&lt;/p&gt; &lt;p&gt;A fixed navigation bar stays visible in a fixed position (top or bottom) independent of the page scroll.&lt;/p&gt; &lt;/div&gt; &lt;div class="col-md-4"&gt; &lt;p&gt;A fixed navigation bar stays visible in a fixed position (top or bottom) independent of the page scroll.&lt;/p&gt; &lt;p&gt;A fixed navigation bar stays visible in a fixed position (top or bottom) independent of the page scroll.&lt;/p&gt; &lt;/div&gt; &lt;div class="col-md-4"&gt; &lt;p&gt;A fixed navigation bar stays visible in a fixed position (top or bottom) independent of the page scroll.&lt;/p&gt; &lt;p&gt;A fixed navigation bar stays visible in a fixed position (top or bottom) independent of the page scroll.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;h1&gt;Scroll this page to see the effect&lt;/h1&gt;&lt;/body&gt; would be: Collapsing the navigation barThe navigation bar takes up too much space on a small screen, we should hide the navigation bar and only show it when it is needed. The navigation bar is replaced by a button in the top right corner. Only if the button is clicked, the navigation bar will be displayed.12345678910111213141516171819202122232425262728293031323334353637&lt;nav class="navbar navbar-inverse"&gt; &lt;div class="container-fluid"&gt; &lt;div class="navbar-header"&gt; &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar"&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class="navbar-brand" href="#"&gt;WebSiteName&lt;/a&gt; &lt;/div&gt; &lt;div class="collapse navbar-collapse" id="myNavbar"&gt; &lt;ul class="nav navbar-nav"&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li class="dropdown"&gt; &lt;a class="dropdown-toggle" data-toggle="dropdown" href="#"&gt;Page 1 &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Page 1-1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Page 1-2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Page 1-3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Page 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Page 3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class="nav navbar-nav navbar-right"&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;span class="glyphicon glyphicon-user"&gt;&lt;/span&gt; Sign Up&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;span class="glyphicon glyphicon-log-in"&gt;&lt;/span&gt; Login&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/nav&gt;&lt;div class="container"&gt; &lt;h3&gt;Collapsible Navbar&lt;/h3&gt; &lt;p&gt;In this example, the navigation bar is hidden on small screens and replaced by a button in the top right corner (try to re-size this window). &lt;p&gt;Only when the button is clicked, the navigation bar will be displayed.&lt;/p&gt;&lt;/div&gt; would be: Form]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Manage touch events in a ViewGroup]]></title>
    <url>%2F%2FAndroid%2F2017-09-30-manage-touch-events-in-a-ViewGroup%2F</url>
    <content type="text"><![CDATA[Intercept Touch Events in a ViewGroupThe onInterceptTouchEvent() method is called whenever a touch event is detected on the surface of a ViewGroup, including on the surface of its children. If onInterceptTouchEvent() return true, the MotionEvent is intercepted, meaning it will not be passed on to the child, but rather to the onTouchEvent() method of the parent.Simply thinking of the process in code-presentation as follows:12345678public boolean dispatchTouchEvent(MotionEvent ev) &#123; if(!onInterceptTouchEvent())&#123; for(View child : children)&#123; if(child.dispatchTouchEvent(ev)) return true; &#125; &#125;return super.dispatchTouchEvent(ev);&#125; The onInterceptTouchEvent() method gives a parent the chance to see any touch event before its children. If you return true from onInterceptTouchEvent() the child view receives an ACTION_CANCEL and the events from that points forward are sent to parent’s onTouchEvent() method for the usual handling. onInterceptTouchEvent() method can also return false and simply spy on events as the travel down the view hierarchy to their usual targets, which will handle the events with their own onTouchEvent().]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git rebase example]]></title>
    <url>%2F%2FGit%2F2017-09-30-git-rebase-example%2F</url>
    <content type="text"><![CDATA[Assume the following history exists and the current branch is “master”. 123 A---B---C topic /D---E---F---G master From this point, the result of either of the following commands: 12git rebase mastergit rebase master topic would be: 123 A'--B'--C' topic /D---E---F---G master NOTE:git rebase master topic == git checkout topic &amp; git rebase master.When rebase exists, topic will remain the checkout-out branch Example Create a A.txt file in master branch Create and change to branch test and create a new file B.txt. Back to branch master and then create a new file C.txt 123master: A---C \test: B The result of following command:(now we are in branch master)12git rebase test mastergit rebase test would be:(we still in branch master)12345 master |A---C---B | test It works by going to the commen ancestor of the two branches(here is A), getting the diff introduced by each commit of the branch you’re on(here branch test), saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto(branch master, set the HEAD to commit C), then applying each change in turn. Finally go back to branch master and do a fast-forward mergeNOTE Since there exists not diffs, commit B is simply appended to commit C]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
